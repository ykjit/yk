#!/bin/sh

set -e

# The parent directory of this script. Under some obscure circumstances $0 may
# not be accurate, so we do some quick and dirty sanity checking.
DIR=`dirname $0`
if [ ! -d "${DIR}/../ykrt" ]; then
    1>&2 echo "error: couldn't find parent directory of yk-config"
    exit 1
fi

# The post-link time optimisations that we can tolerate. At this moment this is
# only the instcombine pass in the below configuration (copied over from the
# default pipeline). Using `instcombine` on its own breaks, possibly due to the
# missing `no-verify-fixpoint`.
POSTLINK_PASSES_STR="mem2reg,instcombine<max-iterations=1;no-use-loop-info;no-verify-fixpoint>"

OUTPUT=""

usage() {
    echo "Generate C compiler flags for building against the yk JIT.\n"
    echo "Usage:"
    echo "    yk-config <profile> [--prelink-pipeline <passes>] [--postlink-pipeline <passes>] <--cc|--cxx|--ar|--ranlib|--cppflags|--cflags|--ldflags>\n"
    echo "    Where <profile> is a Rust cargo profile starting with either 'debug' or 'release'."
}


handle_arg() {
    profile=$1
    shift

    if [ "x${YKB_YKLLVM_BIN_DIR}" != "x" ]; then
        ykllvm_bin_dir=`realpath ${YKB_YKLLVM_BIN_DIR}`
    else
        # The way this path is calculated must match that in ykbuild/build.rs.
        ykllvm_bin_dir=`realpath ${DIR}/../target/${profile}/ykllvm/bin/`
    fi

    case $1 in
        --cc) OUTPUT="${ykllvm_bin_dir}/clang" ;;
        --cxx) OUTPUT="${ykllvm_bin_dir}/clang++" ;;
        --ar) OUTPUT="${ykllvm_bin_dir}/llvm-ar" ;;
        --ranlib) OUTPUT="${ykllvm_bin_dir}/llvm-ranlib" ;;
        --prelink-pipeline)
            if [ -z "$2" ] || [ "$(echo $2 | cut -b 1,2)" = "--" ]; then
                1>&2 echo "Error: Expected passes after --prelink-pipeline."
                usage
                exit 1
            else
                PRELINK_PASSES_STR=$2
                shift
            fi
            ;;
        --postlink-pipeline)
            if [ -z "$2" ] || [ "$(echo $2 | cut -b 1,2)" = "--" ]; then
                1>&2 echo "Error: Expected passes after --postlink-pipeline."
                usage
                exit 1
            else
                POSTLINK_PASSES_STR=$2
                shift
            fi
            ;;
        --cflags)
            # FIXME: we can only do -O0 for now.
            OUTPUT="${OUTPUT} -O0"
            # Enable LTO.
            OUTPUT="${OUTPUT} -flto"
            # Outline functions containing loops during AOT compilation. Needed
            # for `yk_unroll_safe`.
            OUTPUT="${OUTPUT} -fyk-noinline-funcs-with-loops"
            # Required so that our curated set of optimisation passes can run.
            # Without this, clang will slap `optnone` attributes on every
            # function, causing optimisations to skip them.
            OUTPUT="${OUTPUT} -Xclang -disable-O0-optnone"
            if [ ! -z "${PRELINK_PASSES_STR}" ]; then
                OUTPUT="${OUTPUT} -mllvm --newpm-passes=${PRELINK_PASSES_STR}"
            fi
            case $profile in
                debug*) OUTPUT="$OUTPUT -g" ;;
            esac
            ;;
        --cppflags)
            # Path to yk.h
            OUTPUT="${OUTPUT} -I${DIR}/../ykcapi"
            ;;
        --ldflags)
            # Use lld.
            OUTPUT="${OUTPUT} -fuse-ld=lld"
            # Embed Yk's IR.
            OUTPUT="${OUTPUT} -Wl,-mllvm=--yk-embed-ir"
            # Add pthread_create wrapper function (__wrap_pthread_create)
            OUTPUT="${OUTPUT} -Wl,--wrap=pthread_create"

            # Disable machine passes that would interfere with block mapping.
            #
            # If you are trying to figure out which pass is breaking the
            # mapping, you can add "-Wl,--mllvm=--print-before-all" and/or
            # "-Wl,--mllvm=--print-after-all" to see the MIR before/after
            # each pass. You can make the output smaller by filtering the
            # output by function name with
            # "-Wl,--mllvm=--filter-print-funcs=<func>". When you have found
            # the candidate, look in `TargetPassConfig.cpp` (in ykllvm) to
            # find the CLI switch required to disable the pass. If you can't
            # (or don't want to) eliminate a whole pass, then you can add
            # (or re-use) a yk-specific flag to disable only aspects of passes.
            OUTPUT="${OUTPUT} -Wl,--mllvm=--disable-branch-fold"
            OUTPUT="${OUTPUT} -Wl,--mllvm=--disable-block-placement"
            # These next two passes interfere with the BlockDisambiguate pass.
            OUTPUT="${OUTPUT} -Wl,--mllvm=--disable-early-taildup"
            OUTPUT="${OUTPUT} -Wl,--mllvm=--disable-tail-duplicate"
            # Interferes with the JIT's inlining stack.
            OUTPUT="${OUTPUT} -Wl,--mllvm=--yk-disable-tail-call-codegen"
            # Fallthrough optimisations distort block mapping.
            OUTPUT="${OUTPUT} -Wl,--mllvm=--yk-no-fallthrough"

            # Ensure control point is patched.
            OUTPUT="${OUTPUT} -Wl,--mllvm=--yk-patch-control-point"

            # Emit stackmaps used for JIT deoptimisation.
            OUTPUT="${OUTPUT} -Wl,--mllvm=--yk-insert-stackmaps"

            # Split blocks after function calls.
            OUTPUT="${OUTPUT} -Wl,--mllvm=--yk-split-blocks-after-calls"

            # Ensure we can unambiguously map back to LLVM IR blocks.
            OUTPUT="${OUTPUT} -Wl,--mllvm=--yk-block-disambiguate"

            # Ensure calls never appear in the entry block of a function.
            OUTPUT="${OUTPUT} -Wl,--mllvm=--yk-no-calls-in-entryblocks"

            # Use the yk extensions to the blockmap section.
            OUTPUT="${OUTPUT} -Wl,--mllvm=--yk-extended-llvmbbaddrmap-section"
            # Enable fix for spill reloads before stackmaps.
            OUTPUT="${OUTPUT} -Wl,--mllvm=--yk-stackmap-spillreloads-fix"
            # Enable shadow stacks.
            OUTPUT="${OUTPUT} -Wl,--mllvm=--yk-shadow-stack"
            # Encode additional locations in stackmaps.
            OUTPUT="${OUTPUT} -Wl,--mllvm=--yk-stackmap-add-locs"
            # Use software-tracer pass
            if [ "${YKB_TRACER}" = "swt" ]; then
                OUTPUT="${OUTPUT} -Wl,--mllvm=--yk-basicblock-tracer"
            fi
            # Add known yk-friendly optimisations.
            #
            # This pairs with `-Xclang -disable-O0-optnone`. See above.
            OUTPUT="${OUTPUT} -Wl,--mllvm=--yk-optnone-after-ir-passes"

            OUTPUT="${OUTPUT} -Xlinker --lto-newpm-passes=${POSTLINK_PASSES_STR}"

            # Emit a basic block map section. Used for block mapping.
            OUTPUT="${OUTPUT} -Wl,--lto-basic-block-sections=labels"

            # Ensure all symbols are exported so that the JIT can use them.
            # FIXME: https://github.com/ykjit/yk/issues/381
            # Find a better way of handling unexported globals inside a trace.
            OUTPUT="${OUTPUT} -Wl,--export-dynamic"
            OUTPUT="${OUTPUT} -Wl,--mllvm=--yk-linkage"

            # Linkage to yk as a library.
            OUTPUT="${OUTPUT} -L${DIR}/../target/${profile}/deps"

            # Encode an rpath so that we don't have to set LD_LIBRARY_PATH.
            #
            # FIXME: Adding rpaths should probably be behind a flag. It's kind
            # of rude to add local rpaths to interpreter binaries that
            # downstreams may want to distribute.
            OUTPUT="${OUTPUT} -Wl,-rpath=${DIR}/../target/${profile}/deps"
            OUTPUT="${OUTPUT} -Wl,-rpath=$(${ykllvm_bin_dir}/llvm-config --link-shared --libdir)"
            # Add a proper RPATH, not a RUNPATH:
            # https://bugs.launchpad.net/ubuntu/+source/glibc/+bug/1737608
            OUTPUT="${OUTPUT} -Wl,--disable-new-dtags"

            # Improve the quality of profiling data.
            OUTPUT="${OUTPUT} -Wl,--no-rosegment"
            ;;
        --libs)
            OUTPUT="${OUTPUT} -lykcapi"
            ;;
        *)
            1>&2 echo "unknown flag: $1\n"
            usage
            exit 1
            ;;
    esac
}

if [ $# -eq 0 ]; then
    usage
    exit 1
fi

case $1 in
    debug*|release*);;
    *) 1>&2 echo "Profile '$1' does not start with 'debug' or 'release'.\n"
       usage
       exit 1
       ;;
esac
profile=$1
shift

while [ $# -ne 0 ]; do
    if [ -z "$2" ] || [ "$(echo $2 | cut -b 1,2)" = "--" ]; then
        handle_arg $profile $1
        shift
    else
        handle_arg $profile $1 $2
        shift
        shift
    fi
done

echo ${OUTPUT}
